import { defaultEvaluators, Evaluator, Context } from '../interpreter/evaluators'

const primitive = <T>(p: T): Evaluator<T> => () => p

const testSimple = <A, T>(op: string, args: A[], result: T) =>
    it(op, () => {
        expect(defaultEvaluators[op](...args.map(primitive))(null)).toEqual(result)
    })
describe('evaluators', () => {
    describe('simple', () => {
        testSimple('plus', [1, 2], 3)
        testSimple('mult', [2, 2], 4)
        testSimple('div', [1, 2], .5)
        testSimple('minus', [1, 2], -1)
        testSimple('pow', [3, 2], 9)
        testSimple('shl', [0xF0, 2], 0xF0 << 2)
        testSimple('shr', [1, 2], 1 >> 2)
        testSimple('ushr', [1, 2], 1 >>> 3)
        testSimple('bwor', [1, 2], 1 | 2)
        testSimple('bwand', [0xF0, 0xFF], 0xF0)
        testSimple('bwxor', [0xFF80, 0xF9F9], 0xFF80 ^ 0xF9F9)
        testSimple('negate', [1], -1)
        testSimple('bwnot', [0x8], ~0x8)
        testSimple('eq', [1, 2], false)
        testSimple('eq', [1, 1], true)
        testSimple('neq', [1, 2], true)
        testSimple('neq', [1, 1], false)
        testSimple('gt', [1, 2], false)
        testSimple('gt', [2, 1], true)
        testSimple('gte', [1, 2], false)
        testSimple('lt', [1, 2], true)
        testSimple('lte', [1, 2], true)
        testSimple('lte', [1, 1], true)
        testSimple('max', [1, 2], 2)
        testSimple('min', [1, 2], 1)
        testSimple('floor', [3.3], 3)
        testSimple('ceil', [4.4], 5)
        testSimple('round', [1.3], 1)
        testSimple('sin', [.5], Math.sin(.5))
        testSimple('cos', [.5], Math.cos(.5))
        testSimple('toLowerCase', ['Bla'], 'bla')
        testSimple('toUpperCase', ['Bla'], 'BLA')
        testSimple('startsWith', ['yes', 'y'], true)
        testSimple('endsWith', ['no', 'y'], false)
        testSimple('charAt', ['bla', 1], 'l')
        testSimple('stringIncludes', ['bla', 'la'], true)
        testSimple('stringIncludes', ['bla', 'blaa'], false)
        testSimple('parseInt', ['8', 10], 8)
        testSimple('parseInt', ['10', 16], 16)
        testSimple('parseFloat', ['8.4'], 8.4)
        testSimple('formatFloat', [0.33333, 2], '0.33')
        testSimple('formatInt', [10, 16], 'a')
        testSimple('isNil', [0], false)
        testSimple('isNil', [null], true)
        testSimple('isNil', [{}], false)
        testSimple('cond', [true, 0, 1], 0)
        testSimple('cond', [false, 0, 1], 1)
        testSimple('not', [123], false)
        testSimple('not', [0], true)
        testSimple('get', [new Map([[0, 'a'], [1, 'b']]), 0], 'a')
        testSimple('get', [new Map([[0, 'a'], [1, 'b']]), 2], null)
        testSimple('size', [new Map([[0, 'a'], [1, 'b']])], 2)
        testSimple('size', [new Map()], 0)
        testSimple('head', [new Map([[0, 'a'], [1, 'b']])], 0)
        testSimple('tail', [new Map([[0, 'a'], [1, 'b']])], 1)
    })

    describe('map', () => {
        it('flatMap', () => {
            expect([...defaultEvaluators.flatMap(() => new Map([[0, 'hello']]), () =>
                new Map([[0, new Map([[1, 'hello'] as [number, string]])]]))(null)
                .entries()]).toEqual([[1, 'hello']])
        })
    })
})